{"project": "PennyLane", "project_url": "pennylane.ai", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"1619": "dfbdac3f4fdfbd3c39f8f0f1bd9acc0234a0f106", "1868": "1c40513a52adebe5be2707b6d0df9002b5190df2", "1899": "7a3918869e60ed7f54797e31c689adf932946848", "1903": "e0a7e4c43cb9d77761b09220ee231c1bfd6e9c0b", "2326": "478e0fa6fd692768105002d8a09d99e70ae7644b", "2886": "342e47673e6de9dd27eaf5844021d69686a01a85", "3702": "a4a66e519778eaba19f41d7a1b6ffc9bf904286e", "3941": "82d813548be40ef6a68af33c33ccd60293d6ce7e", "4556": "b11abe6c29eac7c816d5dc4b816e816b4ae0fe9d", "5735": "bca4a0d9e8ab0fa9b9daa98cfa271bad06ebb630", "5962": "2003ce70e82af489566669c3dd1a4ada3ca42250", "7509": "51d3bd43eafda43744b2e2dd1cb063840e544494", "8513": "9b4668fc01ce80b1dcf3856191b00103b829e7c8", "9547": "5cb0994faba23ce7e8e8dc7512b9e477a92138ff", "11119": "9534cc8acc27b20bc10930d876a9c345ab003e8c", "12104": "15a61bbdbeea330acfed8059d3fc46a9e0661ab8", "12291": "003e8eff9b52e2e142fd59eba731ec224a714a5a", "12489": "10f3a5a66744326b77974741d1c9785659616523"}, "revision_to_date": {"1619": 1542072067000, "1868": 1548788038000, "1899": 1550101279000, "1903": 1552108958000, "2326": 1561228473000, "2886": 1568067809000, "3702": 1571428615000, "3941": 1572460370000, "4556": 1574141466000, "5735": 1581112013000, "5962": 1582892500000, "7509": 1589506422000, "8513": 1592839494000, "9547": 1597725512000, "11119": 1603179286000, "12104": 1606500685000, "12291": 1607471155000, "12489": 1608653377000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz"], "machine": ["MARIA-XPS"], "num_cpu": ["8"], "os": ["Ubuntu-20.04"], "ram": ["7861728"], "python": ["3.8"], "pennylane": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz", "machine": "MARIA-XPS", "num_cpu": "8", "os": "Ubuntu-20.04", "ram": "7861728", "python": "3.8", "pennylane": "", "branch": "master"}], "benchmarks": {"benchmark_numpy.NumpyCircuit.time_iqp": {"code": "class NumpyCircuit:\n    def time_iqp(self, n_qubits, n_layers):\n    \t\"\"\"IQP circuit benchmark.\n    \t\"\"\"\n    \trandom_iqp_wires = random.sample(range(n_qubits), ceil(min(2, n_qubits) * random.random()))\n    \tdev = qml.device('default.qubit', wires=n_qubits)\n    \n    \t@qml.qnode(dev)\n    \tdef circuit():\n    \t\t\"\"\"Mutable IQP quantum circuit.\"\"\"\n    \t\tfor i in range(n_qubits):\n    \t\t\tqml.Hadamard(i)\n    \n    \t\tfor i in range(n_layers * n_qubits):\n    \t\t\twires = random_iqp_wires\n    \t\t\tif len(wires) == 1:\n    \t\t\t\tqml.PauliZ(wires=wires)\n    \t\t\telif len(wires) == 2:\n    \t\t\t\tqml.CZ(wires=wires)\n    \t\t\telif len(wires) == 3:\n    \t\t\t\tqml.CCZ(wires)\n    \n    \t\tfor i in range(n_qubits):\n    \t\t\tqml.Hadamard(i)\n    \n    \t\treturn qml.expval(qml.PauliZ(0))\n    \n    \tcircuit()", "min_run_count": 2, "name": "benchmark_numpy.NumpyCircuit.time_iqp", "number": 0, "param_names": ["n_qubits", "n_layers"], "params": [["2", "5", "10"], ["1", "4", "8"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4a6be8ccab91a9d4ec395e8a946d323d933bf67110f7946babf378bf3957bfc1", "warmup_time": -1}, "benchmark_numpy.NumpyCircuit.time_nearest_neighbour": {"code": "class NumpyCircuit:\n    def time_nearest_neighbour(self, n_qubits, n_layers):\n    \t\"\"\"Nearest-neighbour circuit benchmark.\n    \n    \tCreates a parametrized quantum circuit with n layers.\n    \tEach layer consists of single-qubit parametrized rotations,\n    \tand two-qubit gates between nearest-neighbour qubits.\n    \t\"\"\"\n    \tparams1 = np.random.uniform(high=2 * pi, size=(n_layers, n_qubits))\n    \tparams2 = np.random.uniform(high=2 * pi, size=(n_layers, n_qubits - 1))\n    \tall_wires = range(n_qubits)\n    \tdev = qml.device('default.qubit', wires=n_qubits)\n    \n    \t@qml.qnode(dev)\n    \tdef circuit():\n    \t\tfor layer in range(n_layers):\n    \t\t\tqml.broadcast(\n    \t\t\t\tqml.RX, pattern=\"single\", wires=all_wires, parameters=params1[layer],\n    \t\t\t)\n    \t\t\tqml.broadcast(\n    \t\t\t\tqml.CRY, pattern=\"chain\", wires=all_wires, parameters=params2[layer],\n    \t\t\t)\n    \t\t\treturn qml.expval(qml.PauliZ(0))\n    \n    \tcircuit()", "min_run_count": 2, "name": "benchmark_numpy.NumpyCircuit.time_nearest_neighbour", "number": 0, "param_names": ["n_qubits", "n_layers"], "params": [["2", "5", "10"], ["1", "4", "8"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "533785d472c0941e59396345e26919b66eb1b7c6e747d96b1f8761fa50ac12a3", "warmup_time": -1}, "benchmark_numpy.NumpyGradient.time_rotations": {"code": "class NumpyGradient:\n    def time_rotations(self, n_qubits, n_params):\n    \t\"\"\"Rotations gradient benchmark.\n    \n    \tThe circuit consists of rotations applied to consecutive wires,\n    \tstarting from wire 0 after the last wire is reached.\n    \t\"\"\"\n    \tparams = np.random.uniform(high=2 * pi, size=n_params)\n    \tdev = qml.device('default.qubit', wires=n_qubits)\n    \n    \t@qml.qnode(dev)\n    \tdef circuit(params):\n    \t\tfor i, w in enumerate(params):\n    \t\t\tqml.RX(w, wires=i % n_qubits)\n    \t\treturn qml.expval(qml.PauliZ(wires=n_qubits-1))\n    \n    \tcircuit.jacobian([params])", "min_run_count": 2, "name": "benchmark_numpy.NumpyGradient.time_rotations", "number": 0, "param_names": ["n_qubits", "n_params"], "params": [["2", "5", "10"], ["5", "20", "40"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4323ba6bebcf76c78e17648bf2fb10c88f363eeb1ec0aadb017c6bc4ce6de0ab", "warmup_time": -1}}, "machines": {"MARIA-XPS": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz", "machine": "MARIA-XPS", "num_cpu": "8", "os": "Ubuntu-20.04", "ram": "7861728", "version": 1}}, "tags": {"v0.1.0": 1619, "v0.10.0": 8513, "v0.11.0": 9547, "v0.12.0": 11119, "v0.13.0": 12104, "v0.13.0-post1": 12291, "v0.13.0-post2": 12489, "v0.2.0": 1868, "v0.3.0": 1899, "v0.3.1": 1903, "v0.4.0": 2326, "v0.5.0": 2886, "v0.6.0": 3702, "v0.6.1": 3941, "v0.7.0": 4556, "v0.8.0": 5735, "v0.8.1": 5962, "v0.9.0": 7509}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}