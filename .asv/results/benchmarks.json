{
    "asv.app_suite.QAOA.time_minvertex": {
        "code": "class QAOA:\n    def time_minvertex(self, n_layers):\n        \"\"\"Time a QAOA algorithm for finding the minimum vertex cover of a graph.\"\"\"\n        hyperparams = {'n_layers': n_layers}\n        benchmark_qaoa(hyperparams)",
        "min_run_count": 2,
        "name": "asv.app_suite.QAOA.time_minvertex",
        "number": 0,
        "param_names": [
            "n_layers"
        ],
        "params": [
            [
                "1",
                "5"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5676172931d2be2e9e97c6ebb6d5a440b152237ee2e19941bd5d486836f0e063",
        "warmup_time": -1
    },
    "asv.app_suite.VQE.time_hydrogen": {
        "code": "class VQE:\n    def time_hydrogen(self, n_steps, optimize):\n        \"\"\"Time a VQE algorithm with the UCCSD ansatz for computing the ground state energy of the\n         hydrogen molecule.\"\"\"\n        hyperparams = {'n_steps': n_steps,\n                       'optimize': optimize}\n        benchmark_vqe(hyperparams)",
        "min_run_count": 2,
        "name": "asv.app_suite.VQE.time_hydrogen",
        "number": 0,
        "param_names": [
            "n_steps",
            "optimize"
        ],
        "params": [
            [
                "1",
                "3"
            ],
            [
                "False",
                "True"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bc96a6671f2e6c1a5ce0f311faccc1135946a8db08863c706dcb71ae7a37b824",
        "warmup_time": -1
    },
    "asv.core_suite.CircuitEvaluation.time_circuit": {
        "code": "class CircuitEvaluation:\n    def time_circuit(self, n_wires, n_layers):\n        \"\"\"Time a simple default circuit.\"\"\"\n        hyperparams = {'n_wires': n_wires,\n                       'n_layers': n_layers}\n        benchmark_circuit(hyperparams)",
        "min_run_count": 2,
        "name": "asv.core_suite.CircuitEvaluation.time_circuit",
        "number": 0,
        "param_names": [
            "n_wires",
            "n_layers"
        ],
        "params": [
            [
                "2",
                "5",
                "10"
            ],
            [
                "3",
                "6",
                "9"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "23e6c66e4ae044652eab3c30a01d8193cadbc1d200d6d64b7fd48c9dbf04885d",
        "warmup_time": -1
    },
    "asv.core_suite.GradientComputation.time_gradient_autograd": {
        "code": "class GradientComputation:\n    def time_gradient_autograd(self, n_wires, n_layers):\n        hyperparams = {'n_wires': n_wires,\n                       'n_layers': n_layers,\n                       'interface': 'autograd'}\n        benchmark_gradient(hyperparams)",
        "min_run_count": 2,
        "name": "asv.core_suite.GradientComputation.time_gradient_autograd",
        "number": 0,
        "param_names": [
            "n_wires",
            "n_layers"
        ],
        "params": [
            [
                "2",
                "5"
            ],
            [
                "3",
                "6"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ed30a0169eec20970901c4a1cf6a779a1a7f6ff5e90593cfccca498fe7298e0d",
        "warmup_time": -1
    },
    "asv.core_suite.GradientComputation.time_gradient_tf": {
        "code": "class GradientComputation:\n    def time_gradient_tf(self, n_wires, n_layers):\n        hyperparams = {'n_wires': n_wires,\n                       'n_layers': n_layers,\n                       'interface': 'tf'}\n        benchmark_gradient(hyperparams)",
        "min_run_count": 2,
        "name": "asv.core_suite.GradientComputation.time_gradient_tf",
        "number": 0,
        "param_names": [
            "n_wires",
            "n_layers"
        ],
        "params": [
            [
                "2",
                "5"
            ],
            [
                "3",
                "6"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "501fd7e2d47f73ba86852bb1284bec48cf1d7362dca5acdb0011bec6ff3762a9",
        "warmup_time": -1
    },
    "asv.core_suite.GradientComputation.time_gradient_torch": {
        "code": "class GradientComputation:\n    def time_gradient_torch(self, n_wires, n_layers):\n        hyperparams = {'n_wires': n_wires,\n                       'n_layers': n_layers,\n                       'interface': 'torch'}\n        benchmark_gradient(hyperparams)",
        "min_run_count": 2,
        "name": "asv.core_suite.GradientComputation.time_gradient_torch",
        "number": 0,
        "param_names": [
            "n_wires",
            "n_layers"
        ],
        "params": [
            [
                "2",
                "5"
            ],
            [
                "3",
                "6"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1c8c22b277b9a814fe7d6ff1eec23c0a4ef9e0aefcecd1299188479656392243",
        "warmup_time": -1
    },
    "asv.core_suite.Optimization.time_optimization_autograd": {
        "code": "class Optimization:\n    def time_optimization_autograd(self):\n        \"\"\"Time gradient descent on the default circuit using autograd.\"\"\"\n        hyperparams = {'interface': 'autograd'}\n        benchmark_optimization(hyperparams, n_steps=10)",
        "min_run_count": 2,
        "name": "asv.core_suite.Optimization.time_optimization_autograd",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d91d25cd634a1f52a44899408323e4746c6a75cd97f0be51bdcf224a7c13f23d",
        "warmup_time": -1
    },
    "asv.core_suite.Optimization.time_optimization_tf": {
        "code": "class Optimization:\n    def time_optimization_tf(self):\n        \"\"\"Time gradient descent on the default circuit using tf.\"\"\"\n        hyperparams = {'interface': 'tf'}\n        benchmark_optimization(hyperparams, n_steps=10)",
        "min_run_count": 2,
        "name": "asv.core_suite.Optimization.time_optimization_tf",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b8c6bc96d0393f95496b1803ad8fa0335db1d196030d27be285910d1c65e39a4",
        "warmup_time": -1
    },
    "asv.core_suite.Optimization.time_optimization_torch": {
        "code": "class Optimization:\n    def time_optimization_torch(self):\n        \"\"\"Time gradient descent on the default circuit using torch.\"\"\"\n        hyperparams = {'interface': 'torch'}\n        benchmark_optimization(hyperparams, n_steps=10)",
        "min_run_count": 2,
        "name": "asv.core_suite.Optimization.time_optimization_torch",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "63df0016c0a5542fff7d6093219db9145b836a0e020f9d6cb73235aa4a8401d1",
        "warmup_time": -1
    },
    "asv.device_suite.CircuitEvaluation.time_circuit": {
        "code": "class CircuitEvaluation:\n    def time_circuit(self, dev, n_wires, n_layers):\n        \"\"\"Time a simple default circuit.\"\"\"\n        hyperparams = {'n_wires': n_wires,\n                       'n_layers': n_layers,\n                       'device': dev}\n        benchmark_circuit(hyperparams)",
        "min_run_count": 2,
        "name": "asv.device_suite.CircuitEvaluation.time_circuit",
        "number": 0,
        "param_names": [
            "device",
            "n_wires",
            "n_layers"
        ],
        "params": [
            [
                "'default.qubit'",
                "'lightning.qubit'",
                "'default.mixed'",
                "'qiskit.aer'",
                "'qiskit.basicaer'",
                "'cirq.simulator'",
                "'cirq.pasqal'",
                "'cirq.qsim'",
                "'qulacs.simulator'"
            ],
            [
                "2",
                "5",
                "10"
            ],
            [
                "3",
                "6",
                "9"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1659c2144ffffaf170b492786638f723f0985cbc6cb0657f38a71cb558010529",
        "warmup_time": -1
    },
    "version": 2
}